// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                  String                 @id @default(uuid())
  year                String
  title               String
  code                String
  startMonth          String
  endMonth            String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  students            Student[]
  emesterRegistration SemesterRegistration[]

  @@map("academic-semester")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updateAt            DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  facultys            Faculty[]

  @@map("academic-faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  facultys          Faculty[]

  @@map("academic-department")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updateAt             DateTime           @updatedAt
  academicSemesterId   String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFcaultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFcaultyId], references: [id])

  @@map("student")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updateAt             DateTime           @updatedAt
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFcaultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFcaultyId], references: [id])
  courseFaculty        CourseFaculty[]

  @@map("faculty")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  courseFacultys  CourseFaculty[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([courseId, facultyId])
  @@map("course_faculty")
}

// change start and enddate type 
model SemesterRegistration {
  id                 String                      @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus? @default(UPCOMING)
  minCredit          String
  maxCredit          String
  academicSemesterId String
  academicSemester   AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
