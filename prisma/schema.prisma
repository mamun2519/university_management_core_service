// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                        String                      @id @default(uuid())
  year                      String
  title                     String
  isCurrent                 Boolean?                    @default(false)
  code                      String
  startMonth                String
  endMonth                  String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  students                  Student[]
  semesterRegistration      SemesterRegistration[]
  StudentEnrollCourse       StudentEnrollCourse[]
  StudentEnrolledCourseMark StudentEnrolledCourseMark[]
  StudentSemesterPayment    StudentSemesterPayment[]

  @@map("academic-semester")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updateAt            DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  facultys            Faculty[]

  @@map("academic-faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  facultys          Faculty[]
  offerdCourses     OfferdCourse[]

  @@map("academic-department")
}

model Student {
  id                                String                              @id @default(uuid())
  studentId                         String
  firstName                         String
  lastName                          String
  middleName                        String
  profileImage                      String
  email                             String
  contactNo                         String
  gender                            String
  bloodGroup                        String
  createdAt                         DateTime                            @default(now())
  updateAt                          DateTime                            @updatedAt
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId              String
  academicDepartment                AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFcaultyId                 String
  academicFaculty                   AcademicFaculty                     @relation(fields: [academicFcaultyId], references: [id])
  StudentSemesterRegistration       StudentSemesterRegistration[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]
  StudentEnrollCourse               StudentEnrollCourse[]
  StudentEnrolledCourseMark         StudentEnrolledCourseMark[]
  StudentSemesterPayment            StudentSemesterPayment[]

  @@map("student")
}

model Faculty {
  id                        String                      @id @default(uuid())
  facultyId                 String
  firstName                 String
  lastName                  String
  middleName                String
  profileImage              String
  email                     String
  contactNo                 String
  gender                    String
  bloodGroup                String
  createdAt                 DateTime                    @default(now())
  updateAt                  DateTime                    @updatedAt
  academicDepartmentId      String
  academicDepartment        AcademicDepartment          @relation(fields: [academicDepartmentId], references: [id])
  academicFcaultyId         String
  academicFaculty           AcademicFaculty             @relation(fields: [academicFcaultyId], references: [id])
  courseFaculty             CourseFaculty[]
  offerdCourseClassSchedule OfferdCourseClassSchedule[]

  @@map("faculty")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                        String                      @id @default(uuid())
  roomNumber                String
  floor                     String
  createdAt                 DateTime                    @default(now())
  updateAt                  DateTime                    @updatedAt
  buildingId                String
  building                  Building                    @relation(fields: [buildingId], references: [id])
  offerdCourseClassSchedule OfferdCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                  String                 @id @default(uuid())
  title               String
  code                String
  credits             Int                    @default(0)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  preRequisite        CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor     CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  courseFacultys      CourseFaculty[]
  offerdCourses       OfferdCourse[]
  StudentEnrollCourse StudentEnrollCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([courseId, facultyId])
  @@map("course_faculty")
}

// change start and enddate type 
model SemesterRegistration {
  id                                String                              @id @default(uuid())
  startDate                         DateTime
  endDate                           DateTime
  status                            SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                         Int
  maxCredit                         Int
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offerdCourses                     OfferdCourse[]
  offerdCourseSection               OfferdCourseSection[]
  offerdCourseClassSchedule         OfferdCourseClassSchedule[]
  studentSemesterRegistration       StudentSemesterRegistration[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("semester_registration")
}

model OfferdCourse {
  id                                String                              @id @default(uuid())
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  courseId                          String
  course                            Course                              @relation(fields: [courseId], references: [id])
  academicDepartmentId              String
  academicDepartment                AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId            String
  semesterRegistration              SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  OfferdCourseSection               OfferdCourseSection[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("offerd-course")
}

model OfferdCourseSection {
  id                                String                              @id @default(uuid())
  title                             String
  maxCapacity                       Int
  currentlyEnrolledStudent          Int                                 @default(0)
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourseId                   String
  offeredCourse                     OfferdCourse                        @relation(fields: [offeredCourseId], references: [id])
  offerdCourseClassSchedule         OfferdCourseClassSchedule[]
  semesterRegistrationId            String
  semesterRegistration              SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("offered-course-section")
}

model OfferdCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfweek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offerCourseSection     OfferdCourseSection  @relation(fields: [offeredCourseSectionId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offer-course-class-schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?
  totalCreditsToken      Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student-semester-registration")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferdCourse         @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferdCourseSection  @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student-semester-registration-course")
}

model StudentEnrollCourse {
  id                         String                      @id @default(uuid())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  studentId                  String
  student                    Student                     @relation(fields: [studentId], references: [id])
  courseId                   String
  course                     Course                      @relation(fields: [courseId], references: [id])
  academicSemesterId         String
  academicSemester           AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  grade                      String?
  point                      Float?                      @default(0)
  totalMarks                 Int?                        @default(0)
  status                     StudentEnrolledCourseStatus @default(ONGOING)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]

  @@map("student_enrolled_course")
}

model StudentEnrolledCourseMark {
  id                      String              @id @default(uuid())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  studentId               String
  student                 Student             @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrollCourse     StudentEnrollCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId      String
  academicSemester        AcademicSemester    @relation(fields: [academicSemesterId], references: [id])
  grade                   String?
  mark                    Int?
  examType                ExamType            @default(MIDTERM)

  @@map("student_enrolled_course_marks")
}

model StudentSemesterPayment {
  id                   String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  studentId            String
  student              Student          @relation(fields: [studentId], references: [id])
  academicSemesterId   String
  academicSemester     AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount    Int?             @default(0)
  partialPaymentAmount Int?             @default(0)
  totalDueAmount       Int?             @default(0)
  totalPaidAmount      Int?             @default(0)
  paymentStatus        PaymentStatus?   @default(PENDING)

  @@map("student_semester_payment")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}
